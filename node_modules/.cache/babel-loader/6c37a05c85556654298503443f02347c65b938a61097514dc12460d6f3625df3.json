{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akhan\\\\Desktop\\\\codebase\\\\AKxSalem\\\\src\\\\Create.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Card from './Card';\nimport CardList from './CardList';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Create() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const questionRef = useRef();\n  const answerRef = useRef();\n  const nameRef = useRef();\n  function handleSubmit() {\n    if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\n      return;\n    }\n    if (questionRef.current.value.length >= 161 || answerRef.current.value.length >= 161) {\n      alert(\"Question or Answer is too long (Cannot be greater than 160 characters)\");\n      return;\n    }\n    const updatedQuestions = [...questions, {\n      id: questions.length,\n      question: questionRef.current.value,\n      answer: answerRef.current.value\n    }];\n    // React rerenders/updates everytime setQuestions is called\n    setQuestions(updatedQuestions);\n    // Clear input fields after submission\n    questionRef.current.value = '';\n    answerRef.current.value = '';\n  }\n  function handleClear() {\n    localStorage.clear();\n    setQuestions([]);\n  }\n  function handleSave() {\n    if (questions.length === 0) {\n      alert(\"No flashcards to save.\");\n      return;\n    }\n    if (nameRef.current.value === \"\") {\n      localStorage.clear();\n      return;\n    }\n    const flashcardSet = {\n      id: new Date().getTime(),\n      // Generate a unique ID for the flashcard set\n      cards: questions,\n      // Save the current list of questions as cards in the set\n      name: nameRef.current.value\n    };\n\n    // Save the flashcard set to local storage\n\n    // LOAD\n    const savedSets = JSON.parse(localStorage.getItem('flashcardSets')) || []; // getting sets data in local storage\n\n    savedSets.push(flashcardSet);\n    localStorage.setItem('flashcardSets', JSON.stringify(savedSets));\n\n    // Clear the questions\n    setQuestions([]);\n    nameRef.current.value = '';\n    alert(\"Flashcard set saved successfully!\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thing text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"field form-control\",\n      ref: nameRef,\n      type: \"text\",\n      placeholder: \"Set Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"field form-control\",\n      ref: questionRef,\n      type: \"text\",\n      placeholder: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"field form-control\",\n      ref: answerRef,\n      type: \"text\",\n      placeholder: \"Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bob1 btn btn-light\",\n      onClick: handleSubmit,\n      children: \"Submit Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-light\",\n      onClick: handleSave,\n      children: \"Save Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardy\",\n      children: /*#__PURE__*/_jsxDEV(CardList, {\n        questions: questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Create, \"eMC2cNsSnX222qnAnFfrL6a2F4E=\");\n_c = Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Card","CardList","jsxDEV","_jsxDEV","Create","_s","questions","setQuestions","questionRef","answerRef","nameRef","handleSubmit","current","value","length","alert","updatedQuestions","id","question","answer","handleClear","localStorage","clear","handleSave","flashcardSet","Date","getTime","cards","name","savedSets","JSON","parse","getItem","push","setItem","stringify","className","children","ref","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/akhan/Desktop/codebase/AKxSalem/src/Create.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Card from './Card';\r\nimport CardList from './CardList'\r\nimport './style.css';\r\n\r\nexport default function Create() {\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const questionRef = useRef();\r\n  const answerRef = useRef();\r\n  const nameRef = useRef();\r\n\r\n  \r\n\r\n  function handleSubmit() {\r\n    if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\r\n      return;\r\n    }\r\n\r\n    if (questionRef.current.value.length >= 161 || answerRef.current.value.length >= 161) {\r\n      alert(\"Question or Answer is too long (Cannot be greater than 160 characters)\")\r\n      return;\r\n    }\r\n\r\n    const updatedQuestions = [...questions, { id: questions.length, question: questionRef.current.value, answer: answerRef.current.value }];\r\n    // React rerenders/updates everytime setQuestions is called\r\n    setQuestions(updatedQuestions);\r\n    // Clear input fields after submission\r\n    questionRef.current.value = '';\r\n    answerRef.current.value = '';\r\n  }\r\n\r\n  function handleClear() {\r\n    localStorage.clear(); \r\n    setQuestions([]);\r\n  }\r\n\r\n  function handleSave() {\r\n    if (questions.length === 0) {\r\n      alert(\"No flashcards to save.\");\r\n      return;\r\n    }\r\n\r\n    if (nameRef.current.value === \"\") {\r\n      localStorage.clear();\r\n      return;\r\n    }\r\n  \r\n    const flashcardSet = {\r\n      id: new Date().getTime(), // Generate a unique ID for the flashcard set\r\n      cards: questions, // Save the current list of questions as cards in the set\r\n      name: nameRef.current.value\r\n    };\r\n  \r\n    // Save the flashcard set to local storage\r\n\r\n    // LOAD\r\n    const savedSets = JSON.parse(localStorage.getItem('flashcardSets')) || []; // getting sets data in local storage\r\n\r\n    savedSets.push(flashcardSet);\r\n    localStorage.setItem('flashcardSets', JSON.stringify(savedSets));\r\n  \r\n    // Clear the questions\r\n    setQuestions([]);\r\n    nameRef.current.value = '';\r\n    alert(\"Flashcard set saved successfully!\");\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"thing text-center\">\r\n      <input className=\"field form-control\" ref={nameRef} type=\"text\" placeholder=\"Set Name\"></input>\r\n      <input className=\"field form-control\" ref={questionRef} type=\"text\" placeholder=\"Question\"></input>\r\n      <input className=\"field form-control\" ref={answerRef} type=\"text\" placeholder=\"Answer\"></input>\r\n      <button className=\"bob1 btn btn-light\" onClick={handleSubmit}>Submit Card</button>\r\n      {/* <button className=\"bob2 btn btn-light\" onClick={handleClear}>Clear All Sets</button> */}\r\n      <button className=\"btn btn-light\" onClick={handleSave}>Save Set</button>\r\n      <div className=\"cardy\">\r\n        <CardList questions={questions} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}