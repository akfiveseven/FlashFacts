{"ast":null,"code":"var _jsxFileName = \"/home/ak/Desktop/codebase/newreact/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport CardData from './CardData';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const x = new CardData();\n  const [questions, setQuestions] = useState(x.arrayOfMaps);\n  const cards = questions.map(item => /*#__PURE__*/_jsxDEV(Card, {\n    question: item.question,\n    answer: item.answer\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this));\n  const questionRef = useRef();\n  const answerRef = useRef();\n  function handleClick(e) {\n    const newQuestion = questionRef.current.value;\n    const newAnswer = answerRef.current.value;\n    const updatedQuestions = [...questions, {\n      question: questionRef.current.value,\n      answer: answerRef.current.value\n    }];\n    console.log(updatedQuestions);\n    setQuestions(updatedQuestions);\n\n    // Clear input fields after submission\n    questionRef.current.value = '';\n    answerRef.current.value = '';\n  }\n  useEffect(() => {\n    console.log(questions); // Log the questions array whenever it changes\n  }, [questions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: questionRef,\n      type: \"text\",\n      placeholder: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: answerRef,\n      type: \"text\",\n      placeholder: \"Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), cards]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LVSgo4g6kipeAktuLysH0Q0Vp1U=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","CardData","Card","jsxDEV","_jsxDEV","App","_s","x","questions","setQuestions","arrayOfMaps","cards","map","item","question","answer","id","fileName","_jsxFileName","lineNumber","columnNumber","questionRef","answerRef","handleClick","e","newQuestion","current","value","newAnswer","updatedQuestions","console","log","children","ref","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/ak/Desktop/codebase/newreact/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport CardData from './CardData'\nimport Card from './Card'\n\nexport default function App() {\n  const x = new CardData();\n\n  const [questions, setQuestions] = useState(x.arrayOfMaps);\n\n  const cards = questions.map(item => (\n    <Card \n      key={item.id}\n      question={item.question}\n      answer={item.answer}\n    />\n  ));\n\n  const questionRef = useRef();\n  const answerRef = useRef();\n\n  function handleClick(e) {\n    const newQuestion = questionRef.current.value;\n    const newAnswer = answerRef.current.value;\n    const updatedQuestions = [...questions, { question: questionRef.current.value, answer: answerRef.current.value }];\n    console.log(updatedQuestions);\n    setQuestions(updatedQuestions);\n\n    // Clear input fields after submission\n    questionRef.current.value = '';\n    answerRef.current.value = '';\n  }\n\n  useEffect(() => {\n    console.log(questions); // Log the questions array whenever it changes\n  }, [questions]);\n\n  return (\n    <div>\n      <input ref={questionRef} type=\"text\" placeholder=\"Question\"></input>\n      <input ref={answerRef} type=\"text\" placeholder=\"Answer\"></input>\n      <button onClick={handleClick}>Submit</button>\n      {cards}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAMC,CAAC,GAAG,IAAIN,QAAQ,CAAC,CAAC;EAExB,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAACQ,CAAC,CAACG,WAAW,CAAC;EAEzD,MAAMC,KAAK,GAAGH,SAAS,CAACI,GAAG,CAACC,IAAI,iBAC9BT,OAAA,CAACF,IAAI;IAEHY,QAAQ,EAAED,IAAI,CAACC,QAAS;IACxBC,MAAM,EAAEF,IAAI,CAACE;EAAO,GAFfF,IAAI,CAACG,EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGb,CACF,CAAC;EAEF,MAAMC,WAAW,GAAGrB,MAAM,CAAC,CAAC;EAC5B,MAAMsB,SAAS,GAAGtB,MAAM,CAAC,CAAC;EAE1B,SAASuB,WAAWA,CAACC,CAAC,EAAE;IACtB,MAAMC,WAAW,GAAGJ,WAAW,CAACK,OAAO,CAACC,KAAK;IAC7C,MAAMC,SAAS,GAAGN,SAAS,CAACI,OAAO,CAACC,KAAK;IACzC,MAAME,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,EAAE;MAAEM,QAAQ,EAAEO,WAAW,CAACK,OAAO,CAACC,KAAK;MAAEZ,MAAM,EAAEO,SAAS,CAACI,OAAO,CAACC;IAAM,CAAC,CAAC;IACjHG,OAAO,CAACC,GAAG,CAACF,gBAAgB,CAAC;IAC7BpB,YAAY,CAACoB,gBAAgB,CAAC;;IAE9B;IACAR,WAAW,CAACK,OAAO,CAACC,KAAK,GAAG,EAAE;IAC9BL,SAAS,CAACI,OAAO,CAACC,KAAK,GAAG,EAAE;EAC9B;EAEA7B,SAAS,CAAC,MAAM;IACdgC,OAAO,CAACC,GAAG,CAACvB,SAAS,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,oBACEJ,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAO6B,GAAG,EAAEZ,WAAY;MAACa,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAU;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpEhB,OAAA;MAAO6B,GAAG,EAAEX,SAAU;MAACY,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAQ;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChEhB,OAAA;MAAQgC,OAAO,EAAEb,WAAY;MAAAS,QAAA,EAAC;IAAM;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC5CT,KAAK;EAAA;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACd,EAAA,CAxCuBD,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}