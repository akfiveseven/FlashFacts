{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akhan\\\\Desktop\\\\codebase\\\\AKxSalem\\\\src\\\\Select.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './style.css';\nimport CardList from './CardList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useFlashcardSetData(selectedSet) {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const cards = selectedSet.cards;\n  const currentCard = cards[currentIndex];\n  const handleNext = () => {\n    setCurrentIndex(prevIndex => (prevIndex + 1) % cards.length);\n  };\n  const handlePrevious = () => {\n    setCurrentIndex(prevIndex => prevIndex === 0 ? cards.length - 1 : prevIndex - 1);\n  };\n  return {\n    currentCard,\n    handleNext,\n    handlePrevious\n  };\n}\n_s(useFlashcardSetData, \"tusBbsahUVevXfyh6oH5R6YDC9Q=\");\nexport default function Select(_ref) {\n  _s3();\n  var _s2 = $RefreshSig$();\n  let {\n    setList\n  } = _ref;\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\n  const [selectedOption, setSelectedOption] = useState('');\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\n\n  const handleChange = event => {\n    setSelectedOption(event.target.value);\n    setShowResult(false); // Reset the showResult state when the option changes\n  };\n\n  const handleViewSet = () => {\n    _s2();\n    const selectedSet = sets.find(set => set.name === selectedOption);\n    if (selectedSet) {\n      const {\n        currentCard,\n        handleNext,\n        handlePrevious\n      } = useFlashcardSetData(selectedSet);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CardList, {\n          questions: [currentCard]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevious,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  };\n  _s2(handleViewSet, \"MA5K8TEsIwmDnlSBvkwA9Nw8pFU=\", false, function () {\n    return [useFlashcardSetData];\n  });\n  const handleClick = () => {\n    setShowResult(true); // Set showResult to true when the button is clicked\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), sets.map(set => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: set.name,\n        children: set.name\n      }, set.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Show Result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), \" \", showResult && handleViewSet(), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s3(Select, \"pxjxfOg6ghSFnxl1K0P3Cfkq5o8=\");\n_c = Select;\nvar _c;\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"names":["React","useState","Link","CardList","jsxDEV","_jsxDEV","useFlashcardSetData","selectedSet","_s","currentIndex","setCurrentIndex","cards","currentCard","handleNext","prevIndex","length","handlePrevious","Select","_ref","_s3","_s2","$RefreshSig$","setList","sets","JSON","parse","localStorage","getItem","selectedOption","setSelectedOption","showResult","setShowResult","handleChange","event","target","value","handleViewSet","find","set","name","children","questions","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleClick","onChange","map","id","_c","$RefreshReg$"],"sources":["C:/Users/akhan/Desktop/codebase/AKxSalem/src/Select.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\nimport CardList from './CardList';\r\n\r\nfunction useFlashcardSetData(selectedSet) {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const cards = selectedSet.cards;\r\n  const currentCard = cards[currentIndex];\r\n\r\n  const handleNext = () => {\r\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % cards.length);\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    setCurrentIndex((prevIndex) =>\r\n      prevIndex === 0 ? cards.length - 1 : prevIndex - 1\r\n    );\r\n  };\r\n\r\n  return { currentCard, handleNext, handlePrevious };\r\n}\r\n\r\nexport default function Select({ setList }) {\r\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\r\n\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n    setShowResult(false); // Reset the showResult state when the option changes\r\n  };\r\n\r\n  const handleViewSet = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n\r\n    if (selectedSet) {\r\n      const { currentCard, handleNext, handlePrevious } = useFlashcardSetData(\r\n        selectedSet\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <CardList questions={[currentCard]} />\r\n          <button onClick={handlePrevious}>Previous</button>\r\n          <button onClick={handleNext}>Next</button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setShowResult(true); // Set showResult to true when the button is clicked\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <select value={selectedOption} onChange={handleChange}>\r\n        <option value=\"\">Select an option</option>\r\n        {sets.map((set) => (\r\n          <option key={set.id} value={set.name}>\r\n            {set.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button onClick={handleClick}>Show Result</button> {/* Button to trigger rendering */}\r\n      {showResult && handleViewSet()} {/* Render the result of handleViewSet when showResult is true */}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}