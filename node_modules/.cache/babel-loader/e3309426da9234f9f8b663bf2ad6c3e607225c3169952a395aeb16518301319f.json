{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akhan\\\\Desktop\\\\codebase\\\\AKxSalem\\\\src\\\\Select.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './style.css';\nimport CardList from './CardList';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Select() {\n  _s();\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\n  const [selectedOption, setSelectedOption] = useState('');\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [viewAll, setViewAll] = useState(false);\n  const [quizMode, setQuizMode] = useState(false);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [correctAnswer, setCorrectAnswer] = useState('');\n  const [randomize, setRandomize] = useState(false);\n  const [shuffledCards, setShuffledCards] = useState([]);\n  useEffect(() => {\n    const selectedSet = sets.find(set => set.name === selectedOption);\n    let c = selectedSet.cards; // Define cards variable here\n    if (randomize) {\n      setShuffledCards(shuffleArray(c));\n    } else {\n      setShuffledCards(c);\n    }\n  }, [randomize, selectedOption]); // Use selectedOption instead of cards in the dependency array\n\n  const handleChange = event => {\n    setSelectedOption(event.target.value);\n    setShowResult(false); // Reset the showResult state when the option changes\n    setCurrentCardIndex(0); // Reset the current card index when the option changes\n    setQuizMode(false); // Reset the quiz mode when the option changes\n  };\n\n  const handleViewSet = () => {\n    const selectedSet = sets.find(set => set.name === selectedOption);\n    if (selectedSet) {\n      const cards = selectedSet.cards;\n      if (viewAll) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            questions: shuffledCards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this);\n      } else if (quizMode) {\n        const currentCard = shuffledCards[currentCardIndex];\n        const handleNext = () => {\n          setCurrentCardIndex(prevIndex => prevIndex === shuffledCards.length - 1 ? 0 : prevIndex + 1);\n          setUserAnswer('');\n          setShowAnswer(false);\n          setCorrectAnswer('');\n        };\n        const handleCheckAnswer = () => {\n          if (userAnswer === currentCard.answer) {\n            setCorrectAnswer('Correct!');\n          } else {\n            setCorrectAnswer('Incorrect!');\n          }\n          setShowAnswer(true);\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Question: \", currentCard.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCheckAnswer,\n            children: \"Check Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), showAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Answer: \", currentCard.answer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: correctAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNext,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: `Card ${currentCardIndex + 1} / ${shuffledCards.length}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this);\n      } else {\n        const currentCard = shuffledCards[currentCardIndex];\n        const handleNext = () => {\n          setCurrentCardIndex(prevIndex => prevIndex === shuffledCards.length - 1 ? 0 : prevIndex + 1);\n        };\n        const handlePrev = () => {\n          setCurrentCardIndex(prevIndex => prevIndex === 0 ? shuffledCards.length - 1 : prevIndex - 1);\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            question: currentCard.question,\n            answer: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePrev,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNext,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: `Card ${currentCardIndex + 1} / ${shuffledCards.length}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      return null;\n    }\n  };\n  const handleClick = () => {\n    setShowResult(true); // Set showResult to true when the button is clicked\n  };\n\n  const handleClear = () => {\n    const selectedSet = sets.find(set => set.name === selectedOption);\n    if (selectedSet) {\n      const updatedSets = sets.filter(set => set.name !== selectedOption);\n      localStorage.setItem('flashcardSets', JSON.stringify(updatedSets));\n    }\n    setSelectedOption('');\n    setViewAll(false);\n    setQuizMode(false);\n    setCurrentCardIndex(0);\n    setRandomize(false);\n    setShuffledCards([]);\n  };\n  const handleRandomize = () => {\n    setRandomize(!randomize);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"foo\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"trigga\",\n        value: selectedOption,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select an option\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), sets.map(set => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: set.name,\n          children: set.name\n        }, set.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: handleClick,\n      disabled: !selectedOption,\n      children: \"Show Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: handleClear,\n      disabled: !selectedOption,\n      children: \"Clear Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: () => setViewAll(!viewAll),\n      disabled: !selectedOption,\n      children: viewAll ? 'Single File' : 'View All Cards'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: () => setQuizMode(!quizMode),\n      disabled: !selectedOption,\n      children: quizMode ? 'Exit Quiz Mode' : 'Quiz Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: handleRandomize,\n      disabled: !selectedOption,\n      children: randomize ? 'Disable Randomize' : 'Randomize'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), showResult && handleViewSet()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to shuffle an array randomly\n_s(Select, \"ISO+PMBCXH51XGKkvynStfj0XYM=\");\n_c = Select;\nfunction shuffleArray(array) {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n}\nvar _c;\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"names":["React","useState","useEffect","Link","CardList","Card","jsxDEV","_jsxDEV","Select","_s","sets","JSON","parse","localStorage","getItem","selectedOption","setSelectedOption","showResult","setShowResult","currentCardIndex","setCurrentCardIndex","viewAll","setViewAll","quizMode","setQuizMode","userAnswer","setUserAnswer","showAnswer","setShowAnswer","correctAnswer","setCorrectAnswer","randomize","setRandomize","shuffledCards","setShuffledCards","selectedSet","find","set","name","c","cards","shuffleArray","handleChange","event","target","value","handleViewSet","children","questions","fileName","_jsxFileName","lineNumber","columnNumber","currentCard","handleNext","prevIndex","length","handleCheckAnswer","answer","question","type","onChange","e","onClick","handlePrev","handleClick","handleClear","updatedSets","filter","setItem","stringify","handleRandomize","className","map","id","disabled","_c","array","shuffledArray","i","j","Math","floor","random","$RefreshReg$"],"sources":["C:/Users/akhan/Desktop/codebase/AKxSalem/src/Select.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\nimport CardList from './CardList';\r\nimport Card from './Card';\r\n\r\nexport default function Select() {\r\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\r\n\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n  const [viewAll, setViewAll] = useState(false);\r\n  const [quizMode, setQuizMode] = useState(false);\r\n  const [userAnswer, setUserAnswer] = useState('');\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n  const [correctAnswer, setCorrectAnswer] = useState('');\r\n  const [randomize, setRandomize] = useState(false);\r\n  const [shuffledCards, setShuffledCards] = useState([]);\r\n\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        const selectedSet = sets.find((set) => set.name === selectedOption);\r\n        let c = selectedSet.cards; // Define cards variable here\r\n        if (randomize) {\r\n          setShuffledCards(shuffleArray(c));\r\n        } else {\r\n          setShuffledCards(c);\r\n        }\r\n      }, [randomize, selectedOption]); // Use selectedOption instead of cards in the dependency array\r\n    \r\n\r\n  const handleChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n    setShowResult(false); // Reset the showResult state when the option changes\r\n    setCurrentCardIndex(0); // Reset the current card index when the option changes\r\n    setQuizMode(false); // Reset the quiz mode when the option changes\r\n  };\r\n\r\n  const handleViewSet = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n\r\n    if (selectedSet) {\r\n      const cards = selectedSet.cards;\r\n\r\n      if (viewAll) {\r\n        return (\r\n          <div>\r\n            <CardList questions={shuffledCards} />\r\n          </div>\r\n        );\r\n      } else if (quizMode) {\r\n        const currentCard = shuffledCards[currentCardIndex];\r\n\r\n        const handleNext = () => {\r\n          setCurrentCardIndex((prevIndex) =>\r\n            prevIndex === shuffledCards.length - 1 ? 0 : prevIndex + 1\r\n          );\r\n          setUserAnswer('');\r\n          setShowAnswer(false);\r\n          setCorrectAnswer('');\r\n        };\r\n\r\n        const handleCheckAnswer = () => {\r\n          if (userAnswer === currentCard.answer) {\r\n            setCorrectAnswer('Correct!');\r\n          } else {\r\n            setCorrectAnswer('Incorrect!');\r\n          }\r\n          setShowAnswer(true);\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <div>Question: {currentCard.question}</div>\r\n            <input\r\n              type=\"text\"\r\n              value={userAnswer}\r\n              onChange={(e) => setUserAnswer(e.target.value)}\r\n            />\r\n            <button onClick={handleCheckAnswer}>Check Answer</button>\r\n            {showAnswer && <div>Answer: {currentCard.answer}</div>}\r\n            <div>{correctAnswer}</div>\r\n            <button onClick={handleNext}>Next</button>\r\n            <p>{`Card ${currentCardIndex + 1} / ${shuffledCards.length}`}</p>\r\n          </div>\r\n        );\r\n      } else {\r\n        const currentCard = shuffledCards[currentCardIndex];\r\n\r\n        const handleNext = () => {\r\n          setCurrentCardIndex((prevIndex) =>\r\n            prevIndex === shuffledCards.length - 1 ? 0 : prevIndex + 1\r\n          );\r\n        };\r\n\r\n        const handlePrev = () => {\r\n          setCurrentCardIndex((prevIndex) =>\r\n            prevIndex === 0 ? shuffledCards.length - 1 : prevIndex - 1\r\n          );\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <Card question={currentCard.question} answer={currentCard.answer} />\r\n            <button onClick={handlePrev}>Previous</button>\r\n            <button onClick={handleNext}>Next</button>\r\n            <p>{`Card ${currentCardIndex + 1} / ${shuffledCards.length}`}</p>\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setShowResult(true); // Set showResult to true when the button is clicked\r\n  };\r\n\r\n  const handleClear = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n\r\n    if (selectedSet) {\r\n      const updatedSets = sets.filter((set) => set.name !== selectedOption);\r\n      localStorage.setItem('flashcardSets', JSON.stringify(updatedSets));\r\n    }\r\n\r\n    setSelectedOption('');\r\n    setViewAll(false);\r\n    setQuizMode(false);\r\n    setCurrentCardIndex(0);\r\n    setRandomize(false);\r\n    setShuffledCards([]);\r\n  };\r\n\r\n  const handleRandomize = () => {\r\n    setRandomize(!randomize);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <div className=\"foo\">\r\n        <select className=\"trigga\" value={selectedOption} onChange={handleChange}>\r\n          <option value=\"\">Select an option</option>\r\n          {sets.map((set) => (\r\n            <option key={set.id} value={set.name}>\r\n              {set.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <button className=\"bobby btn btn-light\" onClick={handleClick} disabled={!selectedOption}>\r\n        Show Set\r\n      </button>\r\n      <button className=\"bobby btn btn-light\" onClick={handleClear} disabled={!selectedOption}>\r\n        Clear Set\r\n      </button>\r\n      <button className=\"bobby btn btn-light\" onClick={() => setViewAll(!viewAll)} disabled={!selectedOption}>\r\n        {viewAll ? 'Single File' : 'View All Cards'}\r\n      </button>\r\n      <button className=\"bobby btn btn-light\" onClick={() => setQuizMode(!quizMode)} disabled={!selectedOption}>\r\n        {quizMode ? 'Exit Quiz Mode' : 'Quiz Mode'}\r\n      </button>\r\n      <button className=\"bobby btn btn-light\" onClick={handleRandomize} disabled={!selectedOption}>\r\n        {randomize ? 'Disable Randomize' : 'Randomize'}\r\n      </button>\r\n      {showResult && handleViewSet()}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Function to shuffle an array randomly\r\nfunction shuffleArray(array) {\r\n  const shuffledArray = [...array];\r\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n  }\r\n  return shuffledArray;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}