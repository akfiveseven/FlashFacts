{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akhan\\\\Desktop\\\\codebase\\\\AKxSalem\\\\src\\\\Select.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './style.css';\nimport CardList from './CardList';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Select() {\n  _s();\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\n  const [selectedOption, setSelectedOption] = useState('');\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const handleChange = event => {\n    setSelectedOption(event.target.value);\n    setShowResult(false); // Reset the showResult state when the option changes\n    setCurrentCardIndex(0); // Reset the current card index when the option changes\n  };\n\n  const handleViewSet = () => {\n    const selectedSet = sets.find(set => set.name === selectedOption);\n    if (selectedSet) {\n      const cards = selectedSet.cards;\n      const currentCard = cards[currentCardIndex];\n      const handleNext = () => {\n        setCurrentCardIndex(prevIndex => prevIndex === cards.length - 1 ? 0 : prevIndex + 1);\n      };\n      const handlePrev = () => {\n        setCurrentCardIndex(prevIndex => prevIndex === 0 ? cards.length - 1 : prevIndex - 1);\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          question: currentCard.question,\n          answer: currentCard.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrev,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Card ${currentCardIndex + 1} / ${cards.length}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  };\n  const handleClick = () => {\n    setShowResult(true); // Set showResult to true when the button is clicked\n  };\n\n  //   const handleClear = () => {\n  //     localStorage.removeItem(0);\n  //     setSelectedOption(\"\");\n  //   };\n\n  const handleClear = () => {\n    const selectedSet = sets.find(set => set.name === selectedOption);\n    if (selectedSet) {\n      const updatedSets = sets.filter(set => set.name !== selectedOption);\n      localStorage.setItem('flashcardSets', JSON.stringify(updatedSets));\n    }\n    setSelectedOption(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"trigga\",\n      value: selectedOption,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), sets.map(set => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: set.name,\n        children: set.name\n      }, set.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: handleClick,\n      children: \"Show Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bobby btn btn-light\",\n      onClick: handleClear,\n      children: \"Clear Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), showResult && handleViewSet(), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Select, \"Y9lzQkeWVzWhQ6kcB4iDKMR34hU=\");\n_c = Select;\nvar _c;\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"names":["React","useState","Link","CardList","Card","jsxDEV","_jsxDEV","Select","_s","sets","JSON","parse","localStorage","getItem","selectedOption","setSelectedOption","showResult","setShowResult","currentCardIndex","setCurrentCardIndex","handleChange","event","target","value","handleViewSet","selectedSet","find","set","name","cards","currentCard","handleNext","prevIndex","length","handlePrev","children","question","answer","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleClick","handleClear","updatedSets","filter","setItem","stringify","className","onChange","map","id","_c","$RefreshReg$"],"sources":["C:/Users/akhan/Desktop/codebase/AKxSalem/src/Select.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\nimport CardList from './CardList';\r\nimport Card from './Card';\r\n\r\nexport default function Select() {\r\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\r\n\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n    setShowResult(false); // Reset the showResult state when the option changes\r\n    setCurrentCardIndex(0); // Reset the current card index when the option changes\r\n  };\r\n\r\n  const handleViewSet = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n\r\n    if (selectedSet) {\r\n      const cards = selectedSet.cards;\r\n      const currentCard = cards[currentCardIndex];\r\n\r\n      const handleNext = () => {\r\n        setCurrentCardIndex((prevIndex) =>\r\n          prevIndex === cards.length - 1 ? 0 : prevIndex + 1\r\n        );\r\n      };\r\n\r\n      const handlePrev = () => {\r\n        setCurrentCardIndex((prevIndex) =>\r\n          prevIndex === 0 ? cards.length - 1 : prevIndex - 1\r\n        );\r\n      };\r\n\r\n      return (\r\n        <div>\r\n          <Card question={currentCard.question} answer={currentCard.answer} />\r\n          <button onClick={handlePrev}>Previous</button>\r\n          <button onClick={handleNext}>Next</button>\r\n          <p>{`Card ${currentCardIndex + 1} / ${cards.length}`}</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setShowResult(true); // Set showResult to true when the button is clicked\r\n  };\r\n\r\n//   const handleClear = () => {\r\n//     localStorage.removeItem(0);\r\n//     setSelectedOption(\"\");\r\n//   };\r\n\r\n  const handleClear = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n  \r\n    if (selectedSet) {\r\n      const updatedSets = sets.filter((set) => set.name !== selectedOption);\r\n      localStorage.setItem('flashcardSets', JSON.stringify(updatedSets));\r\n    }\r\n  \r\n    setSelectedOption(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <select className=\"trigga\" value={selectedOption} onChange={handleChange}>\r\n        <option value=\"\">Select an option</option>\r\n        {sets.map((set) => (\r\n          <option key={set.id} value={set.name}>\r\n            {set.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button className=\"bobby btn btn-light\" onClick={handleClick}>Show Set</button> {/* Button to trigger rendering */}\r\n      <button className=\"bobby btn btn-light\" onClick={handleClear}>Clear Set</button>\r\n      {showResult && handleViewSet()} {/* Render the result of handleViewSet when showResult is true */}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE;EAEpE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAE3D,MAAMmB,YAAY,GAAIC,KAAK,IAAK;IAC9BN,iBAAiB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACrCN,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IACtBE,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED,MAAMK,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,WAAW,GAAGhB,IAAI,CAACiB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAKd,cAAc,CAAC;IAEnE,IAAIW,WAAW,EAAE;MACf,MAAMI,KAAK,GAAGJ,WAAW,CAACI,KAAK;MAC/B,MAAMC,WAAW,GAAGD,KAAK,CAACX,gBAAgB,CAAC;MAE3C,MAAMa,UAAU,GAAGA,CAAA,KAAM;QACvBZ,mBAAmB,CAAEa,SAAS,IAC5BA,SAAS,KAAKH,KAAK,CAACI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGD,SAAS,GAAG,CACnD,CAAC;MACH,CAAC;MAED,MAAME,UAAU,GAAGA,CAAA,KAAM;QACvBf,mBAAmB,CAAEa,SAAS,IAC5BA,SAAS,KAAK,CAAC,GAAGH,KAAK,CAACI,MAAM,GAAG,CAAC,GAAGD,SAAS,GAAG,CACnD,CAAC;MACH,CAAC;MAED,oBACE1B,OAAA;QAAA6B,QAAA,gBACE7B,OAAA,CAACF,IAAI;UAACgC,QAAQ,EAAEN,WAAW,CAACM,QAAS;UAACC,MAAM,EAAEP,WAAW,CAACO;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACpEnC,OAAA;UAAQoC,OAAO,EAAER,UAAW;UAAAC,QAAA,EAAC;QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9CnC,OAAA;UAAQoC,OAAO,EAAEX,UAAW;UAAAI,QAAA,EAAC;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1CnC,OAAA;UAAA6B,QAAA,EAAK,QAAOjB,gBAAgB,GAAG,CAAE,MAAKW,KAAK,CAACI,MAAO;QAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC;IAEV,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB1B,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC;;EAEH;EACA;EACA;EACA;;EAEE,MAAM2B,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMnB,WAAW,GAAGhB,IAAI,CAACiB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAKd,cAAc,CAAC;IAEnE,IAAIW,WAAW,EAAE;MACf,MAAMoB,WAAW,GAAGpC,IAAI,CAACqC,MAAM,CAAEnB,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAKd,cAAc,CAAC;MACrEF,YAAY,CAACmC,OAAO,CAAC,eAAe,EAAErC,IAAI,CAACsC,SAAS,CAACH,WAAW,CAAC,CAAC;IACpE;IAEA9B,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;EAGD,oBACET,OAAA;IAAK2C,SAAS,EAAC,UAAU;IAAAd,QAAA,gBACvB7B,OAAA;MAAQ2C,SAAS,EAAC,QAAQ;MAAC1B,KAAK,EAAET,cAAe;MAACoC,QAAQ,EAAE9B,YAAa;MAAAe,QAAA,gBACvE7B,OAAA;QAAQiB,KAAK,EAAC,EAAE;QAAAY,QAAA,EAAC;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACzChC,IAAI,CAAC0C,GAAG,CAAExB,GAAG,iBACZrB,OAAA;QAAqBiB,KAAK,EAAEI,GAAG,CAACC,IAAK;QAAAO,QAAA,EAClCR,GAAG,CAACC;MAAI,GADED,GAAG,CAACyB,EAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEX,CACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAETnC,OAAA;MAAQ2C,SAAS,EAAC,qBAAqB;MAACP,OAAO,EAAEC,WAAY;MAAAR,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC,eAChFnC,OAAA;MAAQ2C,SAAS,EAAC,qBAAqB;MAACP,OAAO,EAAEE,WAAY;MAAAT,QAAA,EAAC;IAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/EzB,UAAU,IAAIQ,aAAa,CAAC,CAAC,EAAC,GAAC;EAAA;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV;AAACjC,EAAA,CAlFuBD,MAAM;AAAA8C,EAAA,GAAN9C,MAAM;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}