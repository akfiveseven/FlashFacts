{"ast":null,"code":"var _jsxFileName = \"/Users/ammarkhan/Desktop/codebase/AKxSalem/src/Foo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Foo() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const questionRef = useRef();\n  const answerRef = useRef();\n  function handleSubmit() {\n    if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\n      return;\n    }\n    const updatedQuestions = [...questions, {\n      id: questions.length,\n      question: questionRef.current.value,\n      answer: answerRef.current.value\n    }];\n    // React rerenders/updates everytime setQuestions is called\n    setQuestions(updatedQuestions);\n    // Clear input fields after submission\n    questionRef.current.value = '';\n    answerRef.current.value = '';\n  }\n  const cards = questions.map(item => /*#__PURE__*/_jsxDEV(Card, {\n    question: item.question,\n    answer: item.answer\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this));\n\n  //<button onClick={handleClear}>Clear</button>\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: questionRef,\n      type: \"text\",\n      placeholder: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: answerRef,\n      type: \"text\",\n      placeholder: \"Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), props.cardz]\n  }, void 0, true);\n}\n_s(Foo, \"Cx2RJ7tyl4VglRwAzYySc6Nv8ts=\");\n_c = Foo;\nvar _c;\n$RefreshReg$(_c, \"Foo\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Foo","_s","questions","setQuestions","questionRef","useRef","answerRef","handleSubmit","current","value","updatedQuestions","id","length","question","answer","cards","map","item","Card","fileName","_jsxFileName","lineNumber","columnNumber","children","ref","type","placeholder","onClick","props","cardz","_c","$RefreshReg$"],"sources":["/Users/ammarkhan/Desktop/codebase/AKxSalem/src/Foo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function Foo() {\n\n  const [questions, setQuestions] = useState([]);\n\n  const questionRef = useRef();\n  const answerRef = useRef();\n  \n\n  function handleSubmit() {\n    if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\n      return;\n    }\n    const updatedQuestions = [...questions, { id: questions.length, question: questionRef.current.value, answer: answerRef.current.value }];\n    // React rerenders/updates everytime setQuestions is called\n    setQuestions(updatedQuestions);\n    // Clear input fields after submission\n    questionRef.current.value = '';\n    answerRef.current.value = '';\n  }\n\n  const cards = questions.map(item => (\n    <Card \n      key={item.id}\n      question={item.question}\n      answer={item.answer}\n    />\n  ));\n\n  //<button onClick={handleClear}>Clear</button>\n\n  return (\n    <>\n      <input ref={questionRef} type=\"text\" placeholder=\"Question\"></input>\n      <input ref={answerRef} type=\"text\" placeholder=\"Answer\"></input>\n      <button onClick={handleSubmit}>Submit</button>\n      {props.cardz}\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAE5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMU,WAAW,GAAGC,MAAM,CAAC,CAAC;EAC5B,MAAMC,SAAS,GAAGD,MAAM,CAAC,CAAC;EAG1B,SAASE,YAAYA,CAAA,EAAG;IACtB,IAAIH,WAAW,CAACI,OAAO,CAACC,KAAK,KAAK,EAAE,IAAIH,SAAS,CAACE,OAAO,CAACC,KAAK,KAAK,EAAE,EAAE;MACtE;IACF;IACA,MAAMC,gBAAgB,GAAG,CAAC,GAAGR,SAAS,EAAE;MAAES,EAAE,EAAET,SAAS,CAACU,MAAM;MAAEC,QAAQ,EAAET,WAAW,CAACI,OAAO,CAACC,KAAK;MAAEK,MAAM,EAAER,SAAS,CAACE,OAAO,CAACC;IAAM,CAAC,CAAC;IACvI;IACAN,YAAY,CAACO,gBAAgB,CAAC;IAC9B;IACAN,WAAW,CAACI,OAAO,CAACC,KAAK,GAAG,EAAE;IAC9BH,SAAS,CAACE,OAAO,CAACC,KAAK,GAAG,EAAE;EAC9B;EAEA,MAAMM,KAAK,GAAGb,SAAS,CAACc,GAAG,CAACC,IAAI,iBAC9BpB,OAAA,CAACqB,IAAI;IAEHL,QAAQ,EAAEI,IAAI,CAACJ,QAAS;IACxBC,MAAM,EAAEG,IAAI,CAACH;EAAO,GAFfG,IAAI,CAACN,EAAE;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGb,CACF,CAAC;;EAEF;;EAEA,oBACEzB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACE1B,OAAA;MAAO2B,GAAG,EAAEpB,WAAY;MAACqB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAU;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpEzB,OAAA;MAAO2B,GAAG,EAAElB,SAAU;MAACmB,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAQ;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChEzB,OAAA;MAAQ8B,OAAO,EAAEpB,YAAa;MAAAgB,QAAA,EAAC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC7CM,KAAK,CAACC,KAAK;EAAA,eACZ,CAAC;AAEP;AAAC5B,EAAA,CAtCuBD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}