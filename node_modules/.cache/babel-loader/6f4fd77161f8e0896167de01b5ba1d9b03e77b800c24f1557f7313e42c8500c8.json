{"ast":null,"code":"var _jsxFileName = \"/Users/ammarkhan/Desktop/codebase/AKxSalem/src/App.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, BrowserRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Card from './Card';\nimport Home from './Home';\nimport Navbar from './Navbar';\nimport Create from './Create';\nimport CardList from './CardList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  //const [questions, setQuestions] = useState([]);\n\n  //const questionRef = useRef();\n  //const answerRef = useRef();\n\n  //function getQuestions() {\n  //return questions;\n  //}\n\n  //function handleClick(e) {\n  //if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\n  //return;\n  //}\n  //const updatedQuestions = [...questions, { id: questions.length, question: questionRef.current.value, answer: answerRef.current.value }];\n  //// React rerenders/updates everytime setQuestions is called\n  //setQuestions(updatedQuestions);\n  //// Clear input fields after submission\n  //questionRef.current.value = '';\n  //answerRef.current.value = '';\n  //}\n\n  //function handleClear(e) {\n  //setQuestions([]);\n\n  //}\n\n  //useEffect(() => {\n  //const storedQuestions = JSON.parse(localStorage.getItem('questionKey'))\n  //if (storedQuestions) setQuestions(storedQuestions)\n  //}, [])\n\n  //useEffect(() => {\n  //localStorage.setItem('questionKey', JSON.stringify(questions));\n  //}, [questions]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/create\",\n          element: /*#__PURE__*/_jsxDEV(Create, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","BrowserRouter","Router","Routes","Route","Link","Card","Home","Navbar","Create","CardList","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/Users/ammarkhan/Desktop/codebase/AKxSalem/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, BrowserRouter }\n    from 'react-router-dom';\nimport { Link } from 'react-router-dom'\nimport Card from './Card'\nimport Home from './Home'\nimport Navbar from './Navbar'\nimport Create from './Create'\nimport CardList from './CardList'\n\nexport default function App() {\n  //const [questions, setQuestions] = useState([]);\n\n  //const questionRef = useRef();\n  //const answerRef = useRef();\n\n  //function getQuestions() {\n    //return questions;\n  //}\n\n  //function handleClick(e) {\n    //if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\n      //return;\n    //}\n    //const updatedQuestions = [...questions, { id: questions.length, question: questionRef.current.value, answer: answerRef.current.value }];\n    //// React rerenders/updates everytime setQuestions is called\n    //setQuestions(updatedQuestions);\n    //// Clear input fields after submission\n    //questionRef.current.value = '';\n    //answerRef.current.value = '';\n  //}\n\n  //function handleClear(e) {\n    //setQuestions([]);\n\n  //}\n\n  \n\n\n  //useEffect(() => {\n    //const storedQuestions = JSON.parse(localStorage.getItem('questionKey'))\n    //if (storedQuestions) setQuestions(storedQuestions)\n  //}, [])\n\n  //useEffect(() => {\n    //localStorage.setItem('questionKey', JSON.stringify(questions));\n  //}, [questions]);\n\n\n  return (\n    <>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" />\n          <Route path=\"/create\" element={<Create />} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEH,aAAa,QACrD,kBAAkB;AAC3B,SAASI,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B;;EAEA;EACA;;EAEA;EACE;EACF;;EAEA;EACE;EACE;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACF;;EAEA;EACE;;EAEF;;EAKA;EACE;EACA;EACF;;EAEA;EACE;EACF;;EAGA,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA,CAACV,MAAM;MAAAc,QAAA,gBACLJ,OAAA,CAACJ,MAAM;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVR,OAAA,CAACT,MAAM;QAAAa,QAAA,gBACLJ,OAAA,CAACR,KAAK;UAACiB,IAAI,EAAC;QAAG;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClBR,OAAA,CAACR,KAAK;UAACiB,IAAI,EAAC,SAAS;UAACC,OAAO,eAAEV,OAAA,CAACH,MAAM;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBACT,CAAC;AAEP;AAACG,EAAA,GAnDuBR,GAAG;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}