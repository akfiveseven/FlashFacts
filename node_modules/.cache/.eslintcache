[{"C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\index.js":"1","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\App.js":"2","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Navbar.js":"3","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Home.js":"4","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\CardList.js":"5","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Card.js":"6","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Study.js":"7","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Create.js":"8","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Select.js":"9"},{"size":311,"mtime":1717387105580,"results":"10","hashOfConfig":"11"},{"size":669,"mtime":1717433731942,"results":"12","hashOfConfig":"11"},{"size":2279,"mtime":1717433753278,"results":"13","hashOfConfig":"11"},{"size":127,"mtime":1717387105577,"results":"14","hashOfConfig":"11"},{"size":268,"mtime":1717387105576,"results":"15","hashOfConfig":"11"},{"size":535,"mtime":1717387105575,"results":"16","hashOfConfig":"11"},{"size":583,"mtime":1717387105579,"results":"17","hashOfConfig":"11"},{"size":3129,"mtime":1717389660996,"results":"18","hashOfConfig":"11"},{"size":6353,"mtime":1717389482377,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"1c3t8k",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\index.js",["54","55","56","57"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter as Router, Routes, Route }\r\n    from 'react-router-dom';\r\nimport App from './App';\r\nimport Navbar from './Navbar'\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <App />\r\n);\r\n\r\n","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\App.js",["58","59","60","61","62","63","64","65"],[],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, BrowserRouter }\r\n    from 'react-router-dom';\r\nimport { Link } from 'react-router-dom'\r\nimport Card from './Card'\r\nimport Home from './Home'\r\nimport Navbar from './Navbar'\r\nimport Create from './Create'\r\nimport CardList from './CardList'\r\nimport Study from './Study'\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Router basename=\"/quiz\">\r\n        <Navbar />\r\n        <Routes>\r\n          <Route path=\"/create\" element={<Create />}/>\r\n          <Route path=\"/study\" element={<Study />} />\r\n        </Routes>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Navbar.js",[],[],"C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Home.js",[],[],"C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\CardList.js",["66"],[],"import React, { useState } from 'react'\r\nimport Card from './Card'\r\n\r\nexport default function CardList({ questions }) {\r\n\r\n\r\n  return (\r\n    questions.map(item => {\r\n      return <Card key={item.id} question={item.question} answer={item.answer}/>;\r\n    })\r\n  );\r\n\r\n}\r\n","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Card.js",["67"],[],"import React, { useState } from 'react';\r\nimport './style.css';\r\n\r\nexport default function Card(props) {\r\n  const [flip, setFlip] = useState(false);\r\n\r\n  const cardSideText = flip ? 'Answer' : 'Question';\r\n\r\n  return (\r\n    <div className={`card ${flip ? 'flip' : ''}`} onClick={() => setFlip(!flip)}>\r\n      <div className=\"front\">\r\n        <div className=\"card-content\">{props.question}</div>\r\n      </div>\r\n      <div className=\"back\">\r\n        <div className=\"card-content\">{props.answer}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Study.js",["68","69","70"],[],"import React from 'react';\r\nimport './style.css';\r\nimport Card from './Card';\r\nimport CardList from './CardList';\r\nimport Select from './Select';\r\n\r\nexport default function Study() {\r\n\r\n    const sets = JSON.parse(localStorage.getItem('flashcardSets')) || []; // getting sets data in local storage\r\n\r\n    function handleView() {\r\n       console.log(sets[0].name);\r\n       \r\n    }\r\n    \r\n    return (\r\n        <div className=\"viewbtn\">\r\n            <div className=\"viewbody\">\r\n                <h1>My Sets</h1>\r\n            </div>\r\n            <Select />\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Create.js",["71","72","73"],[],"import React, { useState, useRef, useEffect } from 'react';\r\nimport Card from './Card';\r\nimport CardList from './CardList'\r\nimport './style.css';\r\n\r\nexport default function Create() {\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const questionRef = useRef();\r\n  const answerRef = useRef();\r\n  const nameRef = useRef();\r\n\r\n  \r\n\r\n  function handleSubmit() {\r\n    if (questionRef.current.value === \"\" || answerRef.current.value === \"\") {\r\n      return;\r\n    }\r\n\r\n    if (questionRef.current.value.length >= 161 || answerRef.current.value.length >= 161) {\r\n      alert(\"Question or Answer is too long (Cannot be greater than 160 characters)\")\r\n      return;\r\n    }\r\n\r\n    const updatedQuestions = [...questions, { id: questions.length, question: questionRef.current.value, answer: answerRef.current.value }];\r\n    // React rerenders/updates everytime setQuestions is called\r\n    setQuestions(updatedQuestions);\r\n    // Clear input fields after submission\r\n    questionRef.current.value = '';\r\n    answerRef.current.value = '';\r\n  }\r\n\r\n  function handleClear() {\r\n    localStorage.clear(); \r\n    setQuestions([]);\r\n  }\r\n\r\n  function handleSave() {\r\n    if (questions.length === 0) {\r\n      alert(\"No flashcards to save.\");\r\n      return;\r\n    }\r\n\r\n    const sets = JSON.parse(localStorage.getItem('flashcardSets')) || []; // getting sets data in local storage\r\n    const selectedSet = sets.find((set) => set.name === nameRef.current.value);\r\n\r\n    if (selectedSet) {\r\n      alert(\"Set name has already been saved.\")\r\n      return;\r\n    }\r\n\r\n\r\n    if (nameRef.current.value === \"\") {\r\n      alert(\"EMPTY SET NAME\");\r\n      return;\r\n    }\r\n  \r\n    const flashcardSet = {\r\n      id: new Date().getTime(), // Generate a unique ID for the flashcard set\r\n      cards: questions, // Save the current list of questions as cards in the set\r\n      name: nameRef.current.value\r\n    };\r\n  \r\n    // Save the flashcard set to local storage\r\n\r\n    // LOAD\r\n    const savedSets = JSON.parse(localStorage.getItem('flashcardSets')) || []; // getting sets data in local storage\r\n\r\n    savedSets.push(flashcardSet);\r\n    localStorage.setItem('flashcardSets', JSON.stringify(savedSets));\r\n  \r\n    // Clear the questions\r\n    setQuestions([]);\r\n    nameRef.current.value = '';\r\n    alert(\"Flashcard set saved successfully!\");\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"viewbtn\">\r\n        <div className=\"viewbody\">\r\n          <h1>Create Flashcard Set</h1>\r\n        </div>\r\n        <div className=\"thing text-center\">\r\n          <input className=\"field form-control\" ref={nameRef} type=\"text\" placeholder=\"Set Name\"></input>\r\n          <input className=\"field form-control\" ref={questionRef} type=\"text\" placeholder=\"Question\"></input>\r\n          <input className=\"field form-control\" ref={answerRef} type=\"text\" placeholder=\"Answer\"></input>\r\n          <button className=\"btn btn-light\" onClick={handleSubmit}>Submit Card</button>\r\n          <button className=\"createButtonStyle btn btn-light\" onClick={handleSave}>Save Set</button>\r\n          <CardList questions={questions} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\akhan\\Desktop\\codebase\\AKxSalem\\src\\Select.js",["74","75","76"],[],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\nimport CardList from './CardList';\r\nimport Card from './Card';\r\n\r\nexport default function Select() {\r\n  const sets = JSON.parse(localStorage.getItem('flashcardSets')) || [];\r\n\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [showResult, setShowResult] = useState(false); // State variable to control rendering\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n  const [viewAll, setViewAll] = useState(false);\r\n  const [quizMode, setQuizMode] = useState(false);\r\n  const [userAnswer, setUserAnswer] = useState('');\r\n  const [showAnswer, setShowAnswer] = useState(false);\r\n  const [correctAnswer, setCorrectAnswer] = useState('');\r\n  const [randomize, setRandomize] = useState(false);\r\n  const [isSetRandomized, setIsSetRandomized] = useState(false); // New state variable\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n    setShowResult(false); // Reset the showResult state when the option changes\r\n    setCurrentCardIndex(0); // Reset the current card index when the option changes\r\n    setQuizMode(false); // Reset the quiz mode when the option changes\r\n    setIsSetRandomized(false);\r\n  };\r\n\r\n  const handleViewSet = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n\r\n    if (selectedSet) {\r\n      let cards = selectedSet.cards;\r\n\r\n      console.log(\"Before: \");\r\n      console.log(cards);\r\n      if (randomize) { // Apply randomization only if not already randomized\r\n        cards = shuffleArray(cards);\r\n        // setIsSetRandomized(true); // Set isSetRandomized to true to indicate the set has been randomized\r\n      }\r\n      console.log(\"After\");\r\n      console.log(cards);\r\n\r\n      if (viewAll) {\r\n        return (\r\n          <div>\r\n            <CardList questions={cards} />\r\n          </div>\r\n        );\r\n      } else if (quizMode) {\r\n        const currentCard = cards[currentCardIndex];\r\n\r\n        const handleNext = () => {\r\n          setCurrentCardIndex((prevIndex) =>\r\n            prevIndex === cards.length - 1 ? 0 : prevIndex + 1\r\n          );\r\n          setUserAnswer('');\r\n          setShowAnswer(false);\r\n          setCorrectAnswer('');\r\n        };\r\n\r\n        const handleCheckAnswer = () => {\r\n          if (userAnswer === currentCard.answer) {\r\n            setCorrectAnswer('Correct!');\r\n          } else {\r\n            setCorrectAnswer('Incorrect!');\r\n          }\r\n          setShowAnswer(true);\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <div>Question: {currentCard.question}</div>\r\n            <input\r\n              type=\"text\"\r\n              value={userAnswer}\r\n              onChange={(e) => setUserAnswer(e.target.value)}\r\n            />\r\n            <button className=\"buttonstyle btn btn-light\" onClick={handleCheckAnswer}>Check Answer</button>\r\n            {showAnswer && <div>Answer: {currentCard.answer}</div>}\r\n            <div>{correctAnswer}</div>\r\n            <button className=\"buttonstyle btn btn-light\" onClick={handleNext}>Next</button>\r\n            <p>{`Card ${currentCardIndex + 1} / ${cards.length}`}</p>\r\n          </div>\r\n        );\r\n      } else {\r\n        const currentCard = cards[currentCardIndex];\r\n\r\n        const handleNext = () => {\r\n          setCurrentCardIndex((prevIndex) =>\r\n            prevIndex === cards.length - 1 ? 0 : prevIndex + 1\r\n          );\r\n        };\r\n\r\n        const handlePrev = () => {\r\n          setCurrentCardIndex((prevIndex) =>\r\n            prevIndex === 0 ? cards.length - 1 : prevIndex - 1\r\n          );\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <Card question={currentCard.question} answer={currentCard.answer} />\r\n            <button className=\"buttonstyle btn btn-light\" onClick={handlePrev}>Previous</button>\r\n            <button className=\"buttonstyle btn btn-light\" onClick={handleNext}>Next</button>\r\n            <p>{`Card ${currentCardIndex + 1} / ${cards.length}`}</p>\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setShowResult(true); // Set showResult to true when the button is clicked\r\n  };\r\n\r\n  const handleClear = () => {\r\n    const selectedSet = sets.find((set) => set.name === selectedOption);\r\n\r\n    if (selectedSet) {\r\n      const updatedSets = sets.filter((set) => set.name !== selectedOption);\r\n      localStorage.setItem('flashcardSets', JSON.stringify(updatedSets));\r\n    }\r\n\r\n    setSelectedOption('');\r\n    setViewAll(false);\r\n    setQuizMode(false);\r\n    setCurrentCardIndex(0);\r\n  };\r\n\r\n  const handleRandomize = () => {\r\n    setRandomize(!randomize);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <div className=\"bigcontainer\">\r\n        <select className=\"selectstyle\" value={selectedOption} onChange={handleChange}>\r\n          <option value=\"\">Select a Set</option>\r\n          {sets.map((set) => (\r\n            <option key={set.id} value={set.name}>\r\n              {set.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <button className=\"buttonstyle btn btn-light\" onClick={handleClick} disabled={!selectedOption}>\r\n        Show Set\r\n      </button>\r\n      <button className=\"buttonstyle btn btn-light\" onClick={handleClear} disabled={!selectedOption}>\r\n        Delete Set\r\n      </button>\r\n      <button className=\"buttonstyle btn btn-light\" onClick={() => setViewAll(!viewAll)} disabled={!selectedOption}>\r\n        {viewAll ? 'Single Card View' : 'View All Cards'}\r\n      </button>\r\n      <button className=\"buttonstyle btn btn-light\" onClick={() => setQuizMode(!quizMode)} disabled={!selectedOption}>\r\n        {quizMode ? 'Exit Quiz Mode' : 'Quiz Mode'}\r\n      </button>\r\n      {/* <button className=\"buttonstyle btn btn-light\" onClick={handleRandomize} disabled={!selectedOption}>\r\n        {randomize ? 'Disable Randomize' : 'Randomize'}\r\n      </button> */}\r\n      {showResult && handleViewSet()}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Function to shuffle an array randomly\r\nfunction shuffleArray(array) {\r\n  const shuffledArray = [...array];\r\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n  }\r\n  return shuffledArray;\r\n}\r\n",{"ruleId":"77","severity":1,"message":"78","line":3,"column":27,"nodeType":"79","messageId":"80","endLine":3,"endColumn":33},{"ruleId":"77","severity":1,"message":"81","line":3,"column":35,"nodeType":"79","messageId":"80","endLine":3,"endColumn":41},{"ruleId":"77","severity":1,"message":"82","line":3,"column":43,"nodeType":"79","messageId":"80","endLine":3,"endColumn":48},{"ruleId":"77","severity":1,"message":"83","line":6,"column":8,"nodeType":"79","messageId":"80","endLine":6,"endColumn":14},{"ruleId":"77","severity":1,"message":"84","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"85","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"86","line":1,"column":38,"nodeType":"79","messageId":"80","endLine":1,"endColumn":44},{"ruleId":"77","severity":1,"message":"87","line":2,"column":50,"nodeType":"79","messageId":"80","endLine":2,"endColumn":63},{"ruleId":"77","severity":1,"message":"88","line":4,"column":10,"nodeType":"79","messageId":"80","endLine":4,"endColumn":14},{"ruleId":"77","severity":1,"message":"89","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":12},{"ruleId":"77","severity":1,"message":"90","line":6,"column":8,"nodeType":"79","messageId":"80","endLine":6,"endColumn":12},{"ruleId":"77","severity":1,"message":"91","line":9,"column":8,"nodeType":"79","messageId":"80","endLine":9,"endColumn":16},{"ruleId":"77","severity":1,"message":"85","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"92","line":7,"column":9,"nodeType":"79","messageId":"80","endLine":7,"endColumn":21},{"ruleId":"77","severity":1,"message":"89","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":12},{"ruleId":"77","severity":1,"message":"91","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":16},{"ruleId":"77","severity":1,"message":"93","line":11,"column":14,"nodeType":"79","messageId":"80","endLine":11,"endColumn":24},{"ruleId":"77","severity":1,"message":"84","line":1,"column":35,"nodeType":"79","messageId":"80","endLine":1,"endColumn":44},{"ruleId":"77","severity":1,"message":"89","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":12},{"ruleId":"77","severity":1,"message":"94","line":34,"column":12,"nodeType":"79","messageId":"80","endLine":34,"endColumn":23},{"ruleId":"77","severity":1,"message":"88","line":2,"column":10,"nodeType":"79","messageId":"80","endLine":2,"endColumn":14},{"ruleId":"77","severity":1,"message":"95","line":19,"column":10,"nodeType":"79","messageId":"80","endLine":19,"endColumn":25},{"ruleId":"77","severity":1,"message":"96","line":133,"column":9,"nodeType":"79","messageId":"80","endLine":133,"endColumn":24},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Routes' is defined but never used.","'Route' is defined but never used.","'Navbar' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'BrowserRouter' is defined but never used.","'Link' is defined but never used.","'Card' is defined but never used.","'Home' is defined but never used.","'CardList' is defined but never used.","'cardSideText' is assigned a value but never used.","'handleView' is defined but never used.","'handleClear' is defined but never used.","'isSetRandomized' is assigned a value but never used.","'handleRandomize' is assigned a value but never used."]